name: Docker Image CI

on:
  push:
    branches: [main]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      IMAGE_NAME: ${{ github.repository }}
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Convert IMAGE_NAME to lowercase
      run: |
        echo "IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV

    - name: Build the Docker image
      run: |
        docker build . --file Dockerfile --tag $IMAGE_NAME:${{ github.sha }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Tag the image with the 'latest' tag
      run: |
        docker tag $IMAGE_NAME:${{ github.sha }} ghcr.io/$IMAGE_NAME:latest

    - name: Tag the image with the SHA
      run: |
        docker tag $IMAGE_NAME:${{ github.sha }} ghcr.io/$IMAGE_NAME:${{ github.sha }}

    - name: Push the Docker image to GitHub Container Registry
      run: |
        docker push ghcr.io/$IMAGE_NAME:latest
        docker push ghcr.io/$IMAGE_NAME:${{ github.sha }}

    - name: Fetch Commit Messages
      run: |
        git fetch --prune --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [[ -z "$LATEST_TAG" ]]; then
          COMMITS=$(git log --pretty=format:"- %s")
        else
          COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s")
        fi
        echo "COMMITS<<EOF" >> $GITHUB_ENV
        echo -e "${COMMITS}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Generate and Push Tag
      run: |
        RELEASE_TAG=${GITHUB_SHA:0:7}
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
        git tag $RELEASE_TAG ${{ github.sha }}
        git push origin $RELEASE_TAG

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: Release ${{ env.RELEASE_TAG }}
        body: |
          Changes in this Release
          ${{ env.COMMITS }}
        draft: false
        prerelease: false